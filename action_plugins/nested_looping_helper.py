# (c) 2014, Brainly.com <pawel.rozlach@brainly.com>

import re

from ansible.utils import template
from ansible import utils
from ansible import errors
from ansible.callbacks import vv
from ansible.runner.return_data import ReturnData

DOCUMENTATION = """
---
module: zone_data_merge
version_added: 1.9.3
short_description: Merge data generated by nested ansible loops
description:
    - This module takes care of data generated by looping over certain command\
    , filters the results using given list, and sets a variable in main \
    namespace which is looping-friendly for Ansible's built-in contructs.
options:
    current_elements_hash:
        description:
            - output of a loop, which should be processed by the module
        required: true
    desired_elements_list:
        description:
            - list to use for filtering.
        required: true
    output_variable_name:
        description:
            - output variable to use for results.
        required: false
extends_documentation_fragment: utilities
author: Pawel Rozlach
"""


class ActionModule(object):

    _MODULE_ARGUMENTS = ["current_elements_hash", "output_variable_name",
                         "desired_elements_list"]

    TRANSFERS_FILES = False

    def __init__(self, runner):
        self.runner = runner

    def _parse_commandline(self, inject, module_args, complex_args):
        args = {}
        if complex_args:
            args.update(complex_args)
        kv = utils.parse_kv(module_args)
        args.update(kv)

        for key in [x for x in self._MODULE_ARGUMENTS if x in args]:
            data = args[key]
            data = template.template(self.runner.basedir, data, inject)
            args[key] = data

        return args

    def _validate_output_variable_name(self, var_name):
        if not isinstance(var_name, str):
            return ["'output_variable_name' param must be a string"]
        elif not re.match(r'^[a-zA-Z0-9_]{3,}$', var_name):
            return ["'output_variable_name' is not a proper variable name"]

        return []

    def _validate_elements_list(self, elements_list):
        if not isinstance(elements_list, list):
            return ["'desired_elements_list' param must be a list"]
        elif len(elements_list) < 1:
            return ["'desired_elements_list' must contain at least one element"]

        return []

    def _validate_elements_hash(self, elements_hash):
        msg = []

        if not isinstance(elements_hash, dict):
            msg.append("'current_elements_hash' is not a dictionary")
        elif 'results' not in elements_hash:
            msg.append("'current_elements_hash' does not contain 'results' key")
        elif not isinstance(elements_hash['results'], list):
            msg.append("'current_elements_hash' is not a result of executing "
                       "a loop")
        elif not len(elements_hash['results']):
            msg.append("'current_elements_hash' does not contain any results")
        else:
            for tmp in elements_hash['results']:
                if 'skipped' in tmp and tmp['skipped']:
                    continue
                if tmp['rc'] != 0:
                    txt = 'Non-zero exit status found for result {0}'
                    msg.append(txt.format(tmp))
                if not isinstance(tmp['item'], str):
                    txt = "Non-string item element found for result {0}"
                    msg.append(txt.format(tmp))

        return msg

    def _validate_input_data(self, conn, args):
        msg = []

        for key in self._MODULE_ARGUMENTS:
            if key not in args:
                msg.append("{0} is a mandatory argument and it's missing".format(key))

        msg.extend(
            self._validate_output_variable_name(args["output_variable_name"]))
        msg.extend(self._validate_elements_list(args["desired_elements_list"]))
        msg.extend(self._validate_elements_hash(args["current_elements_hash"]))

        if len(msg):
            txt = ', '.join(msg) + '.'
            raise errors.AnsibleError(txt)

        for key in self._MODULE_ARGUMENTS:
            vv("{0}: {1}".format(key, args[key]))

    def run(
        self, conn, tmp, module_name, module_args, inject, complex_args=None,
            **kwargs):
        """Please refer to Ansible API documentation for more details on
        ActionModules.
        """

        args = self._parse_commandline(inject, module_args, complex_args)
        self._validate_input_data(conn, args)

        output = []

        for tmp in args["current_elements_hash"]['results']:
            if 'skipped' in tmp and tmp['skipped']:
                continue
            for entry in tmp['stdout_lines']:
                if entry in args['desired_elements_list']:
                    continue
                output_element = {'item_key': tmp['item'],
                                  'item_val': entry}
                vv("Adding {} to output".format(output_element))
                output.append(output_element)

        result = dict(ansible_facts={args['output_variable_name']: output})
        return ReturnData(conn=conn, comm_ok=True, result=result)
