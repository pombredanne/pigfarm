# (c) 2014, Brainly.com <pawel.rozlach@brainly.com>

import re

from ansible.plugins.action import ActionBase
from ansible import errors
try:
    from __main__ import display
except ImportError:
    from ansible.utils.display import Display
    display = Display()

DOCUMENTATION = """
---
module: zone_data_merge
version_added: 1.9.3
short_description: Merge data generated by nested ansible loops
description:
    - This module takes care of data generated by looping over certain command\
    , filters the results using given list, and sets a variable in main \
    namespace which is looping-friendly for Ansible's built-in contructs.
options:
    current_elements_hash:
        description:
            - output of a loop, which should be processed by the module
        required: true
    desired_elements_list:
        description:
            - list to use for filtering.
        required: true
    output_variable_name:
        description:
            - output variable to use for results.
        required: false
extends_documentation_fragment: utilities
author: Pawel Rozlach
"""


class ActionModule(ActionBase):

    _MODULE_ARGUMENTS = ["current_elements_hash", "output_variable_name",
                         "desired_elements_list"]

    TRANSFERS_FILES = False

    def _validate_output_variable_name(self, var_name):
        if not isinstance(var_name, unicode):
            return ["'output_variable_name' param must be a string, currently: `{}`".format(var_name)]
        elif not re.match(r'^[a-zA-Z0-9_]{3,}$', var_name):
            return ["'output_variable_name' is not a proper variable name"]

        return []

    def _validate_elements_list(self, elements_list):
        if not isinstance(elements_list, list):
            return ["'desired_elements_list' param must be a list"]
        elif len(elements_list) < 1:
            return ["'desired_elements_list' must contain at least one element"]

        return []

    def _validate_elements_hash(self, elements_hash):
        msg = []

        if not isinstance(elements_hash, dict):
            msg.append("'current_elements_hash' is not a dictionary")
        elif 'results' not in elements_hash:
            msg.append("'current_elements_hash' does not contain 'results' key")
        elif not isinstance(elements_hash['results'], list):
            msg.append("'current_elements_hash' is not a result of executing "
                       "a loop")
        elif not len(elements_hash['results']):
            msg.append("'current_elements_hash' does not contain any results")
        else:
            for tmp in elements_hash['results']:
                if 'skipped' in tmp and tmp['skipped']:
                    continue
                if tmp['rc'] != 0:
                    txt = 'Non-zero exit status found for result {0}'
                    msg.append(txt.format(tmp))
                if not isinstance(tmp['item'], unicode):
                    txt = "Non-string item element `{}` found in result {}"
                    msg.append(txt.format(tmp['item'], tmp))

        return msg

    def _validate_input_data(self):
        msg = []

        for key in self._MODULE_ARGUMENTS:
            if key not in self._task.args:
                msg.append("{0} is a mandatory argument and it's missing".format(key))

        msg.extend(
            self._validate_output_variable_name(self._templar.template(self._task.args["output_variable_name"])))
        msg.extend(self._validate_elements_list(self._templar.template(self._task.args["desired_elements_list"])))
        msg.extend(self._validate_elements_hash(self._templar.template(self._task.args["current_elements_hash"])))

        if len(msg):
            txt = ', '.join(msg) + '.'
            raise errors.AnsibleError(txt)

        for key in self._MODULE_ARGUMENTS:
            display.vv("{0}: {1}".format(key, self._task.args[key]))

    def run(self, tmp=None, task_vars=None):
        """Please refer to Ansible API documentation for more details on
        ActionModules.
        """
        if task_vars is None:
            task_vars = dict()

        result = super(ActionModule, self).run(tmp, task_vars)
        facts = dict()

        self._validate_input_data()

        output = []

        for tmp in self._task.args["current_elements_hash"]['results']:
            if 'skipped' in tmp and tmp['skipped']:
                continue
            for entry in tmp['stdout_lines']:
                if entry in self._task.args['desired_elements_list']:
                    continue
                output_element = {'item_key': tmp['item'],
                                  'item_val': entry}
                display.vv("Adding {} to output".format(output_element))
                output.append(output_element)

        facts[self._task.args['output_variable_name']] = output

        result['changed'] = False
        result['ansible_facts'] = facts
        return result
